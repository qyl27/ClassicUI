import java.time.ZonedDateTime

plugins {
    id 'architectury-plugin' version "${architect_plugin_version}" apply false
    id 'dev.architectury.loom' version "${architectury_loom_version}" apply false
    id 'com.github.johnrengelman.shadow' version "${shadow_plugin_version}" apply false
    id 'me.shedaniel.unified-publishing' version "${unified_publishing_version}" apply false
}

def ENV = System.getenv()

var publishVersion = project.mod_version
publishVersion += "+mc${project.minecraft_version}"
var mavenVersion = publishVersion
if (!ENV.MOD_RELEASE) {
    mavenVersion += '-SNAPSHOT'
}
ext.publishVersion = publishVersion
ext.mavenVersion = mavenVersion

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'architectury-plugin'
    apply plugin: 'dev.architectury.loom'

    group = rootProject.mod_group
    version = rootProject.mod_version

    architectury {
        minecraft = rootProject.minecraft_version
    }

    loom {
        silentMojangMappingsLicense()

        setEnableTransitiveAccessWideners true
        setEnableModProvidedJavadoc true

        interfaceInjection {
            setEnableDependencyInterfaceInjection true
        }
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        repositories {
            maven {
                name = 'Mod Menu'
                url = 'https://maven.terraformersmc.com/releases'
            }
        }

        maven {
            name = 'Curse maven'
            url = 'https://cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }

        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases/'
        }

        maven {
            name = 'Quilt'
            url = 'https://maven.quiltmc.org/repository/release'
        }

        mavenCentral()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.parchment_minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    processResources {
        var resourcesToReplace = ['build_info.properties',
                                  'META-INF/mods.toml',
                                  'META-INF/neoforge.mods.toml',
                                  'pack.mcmeta',
                                  'fabric.mod.json',
                                  'quilt.mod.json']
        var replaceTokens = [
                build_time: ZonedDateTime.now().toString(),
                mod_id: mod_id,
                mod_name: mod_name,
                mod_version: mod_version,
                mod_group: mod_group,
                mod_description: mod_description,
                mod_url_home: mod_url_home,
                mod_url_source: mod_url_source,
                mod_url_issues: mod_url_issues,
                mod_authors: mod_authors,
                mod_credits: mod_credits,
                mod_license: mod_license,
                minecraft_version: minecraft_version,
                parchment_minecraft_version: parchment_minecraft_version,
                parchment_version: parchment_version,
                forge_loader_version: forge_loader_version,
                forge_version: forge_version,
                fabric_loader_version: fabric_loader_version,
                fabric_api_version: fabric_api_version,
                neoforge_loader_version: neoforge_loader_version,
                neoforge_version: neoforge_version,
                quilt_loader_version: quilt_loader_version,
                quilt_api_version: quilt_api_version,
                next_minecraft_version: next_minecraft_version,
                next_forge_loader_version: next_forge_loader_version,
                next_forge_version: next_forge_version,
                next_fabric_loader_version: next_fabric_loader_version,
                next_fabric_api_version: next_fabric_api_version,
                next_neoforge_loader_version: next_neoforge_loader_version,
                next_neoforge_version: next_neoforge_version,
                next_quilt_loader_version: next_quilt_loader_version,
                next_quilt_api_version: next_quilt_api_version,
        ]

        inputs.properties replaceTokens
        filesMatching(resourcesToReplace) {
            expand replaceTokens
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    publishing {
        repositories {
            mavenLocal()

            maven {
                name = 'YuluoMaven'
                version = mavenVersion

                def releaseUrl = 'https://maven.yuluo.dev/repository/maven-releases/'
                def snapshotUrl = 'https://maven.yuluo.dev/repository/maven-snapshots/'
                url = ENV.MOD_RELEASE ? releaseUrl : snapshotUrl

                credentials {
                    username ENV.MOD_MAVEN_USER
                    password ENV.MOD_MAVEN_PASS
                }
            }
        }
    }
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'me.shedaniel.unified-publishing'

    loom {
        accessWidenerPath = project(':').loom.accessWidenerPath
    }

    configurations {
        common {
            canBeResolved = true
            canBeConsumed = false
        }
        compileClasspath.extendsFrom common
        runtimeClasspath.extendsFrom common
        developmentForge.extendsFrom common
        developmentFabric.extendsFrom common

        shadowBundle {
            canBeResolved = true
            canBeConsumed = false
        }
    }

    shadowJar {
        exclude 'architectury.common.json'

        configurations = [project.configurations.shadowBundle]
        archiveClassifier = 'dev-shadow'
    }

    remapJar {
        injectAccessWidener = true
        input.set shadowJar.archiveFile
        dependsOn shadowJar
    }

    sourcesJar {
        def commonSources = project(':').sourcesJar
        dependsOn commonSources
        from commonSources.archiveFile.map { zipTree(it) }
    }

    components.java {
        withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
            skip()
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = "${rootProject.name}-${project.name}"
                version = mavenVersion
                from components.java
            }
        }
    }
}

architectury {
    common(project.enabled_platforms.split(','))
}

loom {
    accessWidenerPath = file("src/main/resources/classicui.accesswidener")
}

sourceSets {
    main {
        resources {
            srcDir file('src/generated/resources')
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = project.name
            version = mavenVersion
            from components.java
        }
    }
}
